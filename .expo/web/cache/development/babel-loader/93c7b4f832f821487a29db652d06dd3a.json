{"ast":null,"code":"import React, { useLayoutEffect } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport styles from \"./styles\";\nimport { getIngredientUrl, getRecipesByIngredient, getCategoryName } from \"../../data/MockDataAPI\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function IngredientScreen(props) {\n  var _route$params, _route$params2;\n\n  var navigation = props.navigation,\n      route = props.route;\n  var ingredientId = (_route$params = route.params) == null ? void 0 : _route$params.ingredient;\n  var ingredientUrl = getIngredientUrl(ingredientId);\n  var ingredientName = (_route$params2 = route.params) == null ? void 0 : _route$params2.name;\n  useLayoutEffect(function () {\n    var _route$params3;\n\n    navigation.setOptions({\n      title: (_route$params3 = route.params) == null ? void 0 : _route$params3.name\n    });\n  }, []);\n\n  var onPressRecipe = function onPressRecipe(item) {\n    navigation.navigate(\"Recipe\", {\n      item: item\n    });\n  };\n\n  var renderRecipes = function renderRecipes(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableHighlight, {\n      underlayColor: \"rgba(73,182,77,0.9)\",\n      onPress: function onPress() {\n        return onPressRecipe(item);\n      },\n      children: _jsx(TouchableHighlight, {\n        underlayColor: \"rgba(73,182,77,0.9)\",\n        onPress: function onPress() {\n          return onPressRecipe(item);\n        },\n        children: _jsxs(View, {\n          style: styles.container,\n          children: [_jsx(Image, {\n            style: styles.photo,\n            source: {\n              uri: item.photo_url\n            }\n          }), _jsx(Text, {\n            style: styles.title,\n            children: item.title\n          }), _jsx(Text, {\n            style: styles.category,\n            children: getCategoryName(item.categoryId)\n          })]\n        })\n      })\n    });\n  };\n\n  return _jsxs(ScrollView, {\n    style: styles.mainContainer,\n    children: [_jsx(View, {\n      style: {\n        borderBottomWidth: 0.4,\n        marginBottom: 10,\n        borderBottomColor: \"grey\"\n      },\n      children: _jsx(Image, {\n        style: styles.photoIngredient,\n        source: {\n          uri: \"\" + ingredientUrl\n        }\n      })\n    }), _jsxs(Text, {\n      style: styles.ingredientInfo,\n      children: [\"Recipes with \", ingredientName, \":\"]\n    }), _jsx(View, {\n      children: _jsx(FlatList, {\n        vertical: true,\n        showsVerticalScrollIndicator: false,\n        numColumns: 2,\n        data: getRecipesByIngredient(ingredientId),\n        renderItem: renderRecipes,\n        keyExtractor: function keyExtractor(item) {\n          return \"\" + item.recipeId;\n        }\n      })\n    })]\n  });\n}","map":{"version":3,"names":["React","useLayoutEffect","styles","getIngredientUrl","getRecipesByIngredient","getCategoryName","IngredientScreen","props","navigation","route","ingredientId","params","ingredient","ingredientUrl","ingredientName","name","setOptions","title","onPressRecipe","item","navigate","renderRecipes","container","photo","uri","photo_url","category","categoryId","mainContainer","borderBottomWidth","marginBottom","borderBottomColor","photoIngredient","ingredientInfo","recipeId"],"sources":["C:/MAD/Food Recipe App/src/screens/Ingredient/IngredientScreen.js"],"sourcesContent":["import React, { useLayoutEffect } from \"react\";\nimport { FlatList, ScrollView, Text, View, Image, TouchableHighlight } from \"react-native\";\nimport styles from \"./styles\";\nimport { getIngredientUrl, getRecipesByIngredient, getCategoryName } from \"../../data/MockDataAPI\";\n\nexport default function IngredientScreen(props) {\n  const { navigation, route } = props;\n\n  const ingredientId = route.params?.ingredient;\n  const ingredientUrl = getIngredientUrl(ingredientId);\n  const ingredientName = route.params?.name;\n\n  useLayoutEffect(() => {\n    navigation.setOptions({\n      title: route.params?.name,\n    });\n  }, []);\n\n  const onPressRecipe = (item) => {\n    navigation.navigate(\"Recipe\", { item });\n  };\n\n  const renderRecipes = ({ item }) => (\n    <TouchableHighlight underlayColor=\"rgba(73,182,77,0.9)\" onPress={() => onPressRecipe(item)}>\n      <TouchableHighlight underlayColor=\"rgba(73,182,77,0.9)\" onPress={() => onPressRecipe(item)}>\n        <View style={styles.container}>\n          <Image style={styles.photo} source={{ uri: item.photo_url }} />\n          <Text style={styles.title}>{item.title}</Text>\n          <Text style={styles.category}>{getCategoryName(item.categoryId)}</Text>\n        </View>\n      </TouchableHighlight>\n    </TouchableHighlight>\n  );\n\n  return (\n    <ScrollView style={styles.mainContainer}>\n      <View style={{ borderBottomWidth: 0.4, marginBottom: 10, borderBottomColor: \"grey\" }}>\n        <Image style={styles.photoIngredient} source={{ uri: \"\" + ingredientUrl }} />\n      </View>\n      <Text style={styles.ingredientInfo}>Recipes with {ingredientName}:</Text>\n      <View>\n        <FlatList vertical showsVerticalScrollIndicator={false} numColumns={2} data={getRecipesByIngredient(ingredientId)} renderItem={renderRecipes} keyExtractor={(item) => `${item.recipeId}`} />\n      </View>\n    </ScrollView>\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,eAAhB,QAAuC,OAAvC;;;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,gBAAT,EAA2BC,sBAA3B,EAAmDC,eAAnD;;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;EAAA;;EAC9C,IAAQC,UAAR,GAA8BD,KAA9B,CAAQC,UAAR;EAAA,IAAoBC,KAApB,GAA8BF,KAA9B,CAAoBE,KAApB;EAEA,IAAMC,YAAY,oBAAGD,KAAK,CAACE,MAAT,qBAAG,cAAcC,UAAnC;EACA,IAAMC,aAAa,GAAGV,gBAAgB,CAACO,YAAD,CAAtC;EACA,IAAMI,cAAc,qBAAGL,KAAK,CAACE,MAAT,qBAAG,eAAcI,IAArC;EAEAd,eAAe,CAAC,YAAM;IAAA;;IACpBO,UAAU,CAACQ,UAAX,CAAsB;MACpBC,KAAK,oBAAER,KAAK,CAACE,MAAR,qBAAE,eAAcI;IADD,CAAtB;EAGD,CAJc,EAIZ,EAJY,CAAf;;EAMA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;IAC9BX,UAAU,CAACY,QAAX,CAAoB,QAApB,EAA8B;MAAED,IAAI,EAAJA;IAAF,CAA9B;EACD,CAFD;;EAIA,IAAME,aAAa,GAAG,SAAhBA,aAAgB;IAAA,IAAGF,IAAH,QAAGA,IAAH;IAAA,OACpB,KAAC,kBAAD;MAAoB,aAAa,EAAC,qBAAlC;MAAwD,OAAO,EAAE;QAAA,OAAMD,aAAa,CAACC,IAAD,CAAnB;MAAA,CAAjE;MAAA,UACE,KAAC,kBAAD;QAAoB,aAAa,EAAC,qBAAlC;QAAwD,OAAO,EAAE;UAAA,OAAMD,aAAa,CAACC,IAAD,CAAnB;QAAA,CAAjE;QAAA,UACE,MAAC,IAAD;UAAM,KAAK,EAAEjB,MAAM,CAACoB,SAApB;UAAA,WACE,KAAC,KAAD;YAAO,KAAK,EAAEpB,MAAM,CAACqB,KAArB;YAA4B,MAAM,EAAE;cAAEC,GAAG,EAAEL,IAAI,CAACM;YAAZ;UAApC,EADF,EAEE,KAAC,IAAD;YAAM,KAAK,EAAEvB,MAAM,CAACe,KAApB;YAAA,UAA4BE,IAAI,CAACF;UAAjC,EAFF,EAGE,KAAC,IAAD;YAAM,KAAK,EAAEf,MAAM,CAACwB,QAApB;YAAA,UAA+BrB,eAAe,CAACc,IAAI,CAACQ,UAAN;UAA9C,EAHF;QAAA;MADF;IADF,EADoB;EAAA,CAAtB;;EAYA,OACE,MAAC,UAAD;IAAY,KAAK,EAAEzB,MAAM,CAAC0B,aAA1B;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAE;QAAEC,iBAAiB,EAAE,GAArB;QAA0BC,YAAY,EAAE,EAAxC;QAA4CC,iBAAiB,EAAE;MAA/D,CAAb;MAAA,UACE,KAAC,KAAD;QAAO,KAAK,EAAE7B,MAAM,CAAC8B,eAArB;QAAsC,MAAM,EAAE;UAAER,GAAG,EAAE,KAAKX;QAAZ;MAA9C;IADF,EADF,EAIE,MAAC,IAAD;MAAM,KAAK,EAAEX,MAAM,CAAC+B,cAApB;MAAA,4BAAkDnB,cAAlD;IAAA,EAJF,EAKE,KAAC,IAAD;MAAA,UACE,KAAC,QAAD;QAAU,QAAQ,MAAlB;QAAmB,4BAA4B,EAAE,KAAjD;QAAwD,UAAU,EAAE,CAApE;QAAuE,IAAI,EAAEV,sBAAsB,CAACM,YAAD,CAAnG;QAAmH,UAAU,EAAEW,aAA/H;QAA8I,YAAY,EAAE,sBAACF,IAAD;UAAA,YAAaA,IAAI,CAACe,QAAlB;QAAA;MAA5J;IADF,EALF;EAAA,EADF;AAWD"},"metadata":{},"sourceType":"module"}